using System.Threading.Tasks;
using net.adamec.dev.markupdoc.CodeModel;
using net.adamec.dev.markupdoc.CodeModel.Builder;
using net.adamec.dev.markupdoc.Markup;

namespace net.adamec.dev.markupdoc.AddOns
{
    /// <summary>
    /// Output add-on interface. Add-on is a functionality extending the output generator at defined extension points.
    /// Implementing class must have a constructor with single <see cref="net.adamec.dev.markupdoc.Options.OutputOptions"/> parameter.
    /// </summary>
    /// <remarks>
    /// One instance per application run is created at <see cref="Application.GetAddOns"/> when
    /// a master switch in configuration <c>Output.EnableAddOns</c> is on (false by default)
    /// Add-on:
    /// <list type="bullet">
    /// <item><term>Can extend the code model root data</term><description>when <see cref="PriorityRootData"/> &gt; 0</description></item>
    /// <item><term>Can extend the index page</term><description>when <see cref="PriorityIndexPage"/> &gt; 0</description></item>
    /// <item><term>Can generate own pages</term><description>when <see cref="PriorityOwnPages"/> &gt; 0</description></item>
    /// <item><term>Can extend "standard" pages' header</term><description>when <see cref="PriorityPageHeader"/> &gt; 0</description></item>
    /// <item><term>Can extend "standard" pages' body</term><description>when <see cref="PriorityPageBody"/> &gt; 0</description></item>
    /// <item><term>Can extend "standard" pages' footer</term><description>when <see cref="PriorityPageFooter"/> &gt; 0</description></item>
    /// </list>
    /// The add-ons are applied in the order given by priority defined for each extension point within the add-on.
    /// </remarks>
    public interface IAddOn
    {
        /// <summary>
        /// Add-on priority for processing the add-on data as a part of <see cref="RootMember"/> constructor.
        /// Value &lt;1 means no processing
        /// </summary>
        int PriorityRootData { get; }
        /// <summary>
        /// Let the add-on to prepare it's own data as a part of <see cref="RootMember"/> constructor.
        /// </summary>
        /// <param name="root">Code model root</param>
        /// <param name="builder">Code model buildel root</param>
        void ProcessRootData(RootMember root, RootMemberBuilder builder);

        /// <summary>
        /// Add-on priority for generating the add-on output to the (main) index page.
        /// Value &lt;1 means no output generated by add-on
        /// </summary>
        int PriorityIndexPage { get; }

        /// <summary>
        /// Writes to the index (main) page of the code model
        /// </summary>
        /// <param name="root">Code model root</param>
        /// <param name="markup">Markup provider</param>
        /// <returns>True when any output has been generated</returns>
        Task<bool> WriteIndexAsync(RootMember root, IMarkupProvider markup);

        /// <summary>
        /// Add-on priority for generating the add-on output pages.
        /// Value &lt;1 means no output generated by add-on
        /// </summary>
        int PriorityOwnPages { get; }
        /// <summary>
        /// Writes the add-on pages into the output
        /// </summary>
        /// <param name="root">Code model root</param>
        /// <param name="markup">Markup provider</param>
        /// <param name="generator">Markup generator</param>
        /// <returns>Async task</returns>
        Task WriteOwnPagesAsync(RootMember root, IMarkupProvider markup, MarkupGenerator generator);
        //Can extend "standard" pages - header 

        /// <summary>
        /// Add-on priority for generating the add-on output to header of code model member page header.
        /// Value &lt;1 means no output generated by add-on
        /// </summary>
        int PriorityPageHeader { get; }

        /// <summary>
        /// Writes the header for the code model member page
        /// </summary>
        /// <param name="member">Member being documented</param>
        /// <param name="markup">Markup provider</param>
        /// <returns>String to be added to the header text builder</returns>
        string WritePageHeader(Member member, IMarkupProvider markup);

        /// <summary>
        /// Add-on priority for generating the add-on output to header of code model member page body.
        /// Value &lt;1 means no output generated by add-on
        /// </summary>
        int PriorityPageBody { get; }

        /// <summary>
        /// Writes the body fro the code model member
        /// </summary>
        /// <param name="member">Member being documented</param>
        /// <param name="markup">Markup provider</param>
        /// <returns>Async task</returns>
        Task WritePageBodyAsync(Member member, IMarkupProvider markup);

        /// <summary>
        /// Add-on priority for generating the add-on output to header of code model member page footer.
        /// Value &lt;1 means no output generated by add-on
        /// </summary>
        int PriorityPageFooter { get; }
        /// <summary>
        /// Writes the footer for the code model member page
        /// </summary>
        /// <param name="baseFileName">Name of the main file</param>
        /// <param name="markup">Markup provider</param>
        /// <returns>String to be added to the footer</returns>
        string WritePageFooter(string baseFileName, IMarkupProvider markup);
    }
}
